openapi: "3.0.3"
info:
  title: "SampleAPI API"
  description: "SampleAPI API"
  version: "1.0.0"
servers:
- url: "https://SampleAPI"
paths:
  /:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Hello World!"
  /1.0/teams/accept/{inviteId}:
    post:
      description: ""
      parameters:
      - name: "inviteId"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /1.0/teams/apply/{teamId}:
    post:
      description: ""
      parameters:
      - name: "teamId"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /1.0/teams/create:
    post:
      description: ""
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/CreateTeamRequest"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "integer"
                format: "int32"
  /1.0/teams/invites:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/InvitesRespondModel"
  /1.0/teams/load:
    get:
      description: ""
      parameters:
      - name: "limit"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "offset"
        in: "query"
        required: false
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/SmallTeamRespondModel"
  /1.0/teams/load/{id}:
    get:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TeamRespondModel"
  /1.0/teams/loadmy:
    get:
      description: ""
  /1.0/teams/tags/{teamId}:
    get:
      description: ""
      parameters:
      - name: "teamId"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TagsOutput"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Example#1:
                  description: ""
                  value:
                    status: "Не вписал userId"
  /1.0/tours/list:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/TourOutputResponse"
  /1.0/tours/results/name:
    get:
      description: ""
      parameters:
      - name: "tourId"
        in: "query"
        required: false
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/TourResultOutputResponse"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Example#1:
                  description: ""
                  value:
                    status: "Не передан корректный tourId"
  /1.0/tours/results/user:
    get:
      description: ""
      parameters:
      - name: "userId"
        in: "query"
        required: false
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/TourResultOutputResponse"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Example#1:
                  description: ""
                  value:
                    status: "Не передан корректный userId"
  /1.0/users/invites/accept/{inviteId}:
    post:
      description: ""
      parameters:
      - name: "inviteId"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /1.0/users/invites/apply/{userId}:
    post:
      description: ""
      parameters:
      - name: "userId"
        in: "path"
        required: true
        schema:
          type: "string"
  /1.0/users/invites/load:
    post:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/UserInvitesRespondModel"
  /1.0/users/login:
    post:
      description: ""
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/LoginInputModel"
        required: true
      responses:
        "401":
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Example#1:
                  description: ""
                  value:
                    status: "Пользователь с указанным логином и паролем не найден"
                Example#2:
                  description: ""
                  value:
                    status: "Пользователь с указанным логином и паролем не найден"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TokenRespondOutput"
  /1.0/users/my:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ProfileOutputResponse"
  /1.0/users/register:
    post:
      description: ""
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/RegisterInputModel"
        required: true
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: "Conflict"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Example#1:
                  description: ""
                  value:
                    status: "Пользователь с таким логином уже зарегистрирован!"
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TokenRespondOutput"
  /1.0/users/tags/{userId}:
    get:
      description: ""
      parameters:
      - name: "userId"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TagsOutput"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Example#1:
                  description: ""
                  value:
                    status: "Не вписал userId"
  /1.0/vacancy/{id}:
    get:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/VacancyRespond"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Example#1:
                  description: ""
                  value:
                    status: "id == null"
  /java:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
  /kotlin:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Hello from Kotlin!"
components:
  schemas:
    CreateTeamRequest:
      type: "object"
      properties:
        name:
          type: "string"
        description:
          type: "string"
      required:
      - "name"
      - "description"
    ProfileOutputResponse:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        username:
          type: "string"
        firstName:
          type: "string"
        lastName:
          type: "string"
        group:
          type: "string"
          enum:
          - "ADMIN"
          - "MEMBER"
          - "OLD_MEMBER"
          - "NOT_VERIFIED"
          - "MENTOR"
          - "JURY"
          - "ORGANIZER"
          - "PRODUCT"
        tgId:
          type: "string"
        registerAt:
          type: "integer"
          format: "int64"
        description:
          type: "string"
        team:
          type: "integer"
          format: "int32"
      required:
      - "username"
      - "firstName"
      - "lastName"
      - "group"
      - "tgId"
      - "description"
    InvitesRespondModel:
      type: "object"
      properties:
        user:
          $ref: "#/components/schemas/ProfileOutputResponse"
        id:
          type: "integer"
          format: "int32"
      required:
      - "user"
    SmallTeamRespondModel:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        name:
          type: "string"
        description:
          type: "string"
        iconUrl:
          type: "string"
        bannerUrl:
          type: "string"
        membersCount:
          type: "integer"
          format: "int32"
      required:
      - "name"
      - "description"
      - "iconUrl"
      - "bannerUrl"
    TeamRespondModel:
      type: "object"
      properties:
        team:
          $ref: "#/components/schemas/SmallTeamRespondModel"
        users:
          type: "array"
          items:
            $ref: "#/components/schemas/ProfileOutputResponse"
      required:
      - "team"
      - "users"
    TagsOutput:
      type: "object"
      properties:
        list:
          type: "array"
          items:
            type: "string"
      required:
      - "list"
    ErrorResponse:
      type: "object"
      properties:
        status:
          type: "string"
      required:
      - "status"
    TourOutputResponse:
      type: "object"
      properties:
        name:
          type: "string"
        year:
          type: "integer"
          format: "int32"
        maxScore:
          type: "integer"
          format: "int32"
      required:
      - "name"
    TourResultOutputResponse:
      type: "object"
      properties:
        tour:
          $ref: "#/components/schemas/TourOutputResponse"
        result:
          type: "number"
          format: "float"
        userId:
          type: "integer"
          format: "int32"
      required:
      - "tour"
    UserInvitesRespondModel:
      type: "object"
      properties:
        team:
          $ref: "#/components/schemas/SmallTeamRespondModel"
        id:
          type: "integer"
          format: "int32"
      required:
      - "team"
    LoginInputModel:
      type: "object"
      properties:
        username:
          type: "string"
        password:
          type: "string"
      required:
      - "username"
      - "password"
    TokenRespondOutput:
      type: "object"
      properties:
        token:
          type: "string"
      required:
      - "token"
    RegisterInputModel:
      type: "object"
      properties:
        username:
          type: "string"
        password:
          type: "string"
        tgLogin:
          type: "string"
        firstName:
          type: "string"
        lastName:
          type: "string"
        birthdayDate:
          type: "integer"
          format: "int64"
      required:
      - "username"
      - "password"
      - "tgLogin"
      - "firstName"
      - "lastName"
    VacancyRespond:
      type: "object"
      properties:
        teamId:
          type: "integer"
          format: "int32"
        tags:
          type: "array"
          items:
            type: "string"
      required:
      - "tags"